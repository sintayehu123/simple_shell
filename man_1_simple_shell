.\" Manpage for shell
.TH man 8 "24 May 2023" "1.0" "simple_shell man page"
.SH NAME
shell \- a limited simple_shell
.SH SYNOPSIS
shell [int argc, char **argv, char **env]
.SH DESCRIPTION
simple_shell, developed in May 2023, is version of the .BKen Thompson shell. The B.Ken Thompson 
shell was developed in 1971 as the first Unix shell and led to the
developement of all later Unix shell.
.SH OVERVIEW
Shell is a command that reads lines from either a file or the terminal,
interprets them, and generally executes other commands. It is the program that can be
launched from within the terminal with ./simple_shell within the simple shell folder.
If no arguments are present and if the standard input of the shell is connected to a terminal,
the shell is considered an interactive shell. An interactive shell generally prompts before
each command and handles programming and command errors differently.

.I Argument List Processing.
.br
shell does not handle arguments or flags.

.I Lexical Structure
.br
The shell reads input in terms of lines from a file and breaks it up into
words at whitespace (blanks and tabs)

.I Quoting
.br
Quoting is not used to	remove the special meaning of certain characters or
words to the shell, such as operators, whitespace, keywords, or alias names.

.I Reserved Words
.br
There are no reserved words or words that have special meaning to shell.

.I Aliases
.br
An alias is a name and corresponding value set using the alias built-in
command. Shell does not allow for aliases.

.I Simple Commands
.br
If a simple command has been recognized, the shell performs the following actions:

.P
1. Leading words of the form ``name=value'' are stripped off and
assigned to the environment of the simple command.  Redirection
operators and their arguments (as described below) are stripped off and saved for  processing.

.P
2. The remaining   words are expanded as described in the section called
Word Expansions, and the first remaining word is considered the com-
mand name and	  the command is located.  The remaining words are con-
sidered the arguments of the command.  If no command name resulted,
then the ``name=value'' variable assignments recognized in 1)	affect
the current shell.

.I Redirections
.br
Redirections are not used in shell.

.I Search and Execution
.br
There are two types of commands shell functions, built-in commands,
.P
When a shell function is executed,  all of the shell positional parameters
(except $0, which remains unchanged) are set to the arguments of the
shell function.  The variables which are explicitly place in the environment of
the command (by placing assignments to them before the function name)
are made local to the function and are set to the values
given.  Then the command given in the function definition is executed.
The positional parameters are restored to their original values when the
command completes. This all occurs within the current shell.
.P
Shell built-in commands are executed internally to  the shell, without
spawning a new process. Shell handles three builtins:
.br

.B exit
.br
 -Exits the shell
Usage: exit
 No flags.
.br
.B env
.br
 -Prints the current environment.
 Usage: env
 No flags.
.br
.B man
.br
 -Prints the man page for shell
 Usage: man shell
 No flags.

.SH PATH SEARCH
.br
When locating a command, the shell first looks to see if it has a shell
function by that name.  Then it looks for a built-in command by that
name.  If a built-in command is not found, one of two things happen:
.TP
1. Command names containing a slash are simply executed without performing
any searches.
.TP
2. The shell searches each entry in the PATH environment variable in
turn for the command. The value of the PATH variable should be a
series of entries separated by colons.  Each entry consists of a
directory name.  The current directory may be indicated implicitly
by an empty directory name, or explicitly by a single period.

.SH EXIT STATUS
Errors that are detected by the shell, such as a syntax error, will cause
the shell to exit with a non-zero exit status.  If the shell is not an
interactive shell, the execution of the shell file will be  aborted.  Oth-
erwise the shell will return the exit status of the last command exe-
cuted, or if the exit builtin is used with a numeric argument, it will
return the argument.

.SH EXAMPLE
.B The shell should work like this in interactive mode:
.br
.I $ ./hsh
.br
.I ($) /bin/ls
.br
.I hsh main.c shell.c
.br
.I ($)
.br
.I ($) exit
.br
.I $

.B Also like this in non-interactive mode:
.br
.I $ echo "/bin/ls" | ./hsh
.br
.I hsh main.c shell.c test_ls_2
.br
.I $
.br
.I $ cat test_ls_2
.br
.I /bin/ls
.br
.I /bin/ls
.br
.I $
.br
.I $ cat test_ls_2 | ./hsh
.br
.I hsh main.c shell.c test_ls_2
.br
.I hsh main.c shell.c test_ls_2
.br
.I $
.br
.SH SEE ALSO
builtin - chsh - echo - execve - pwd - getline - strtok - strdup - str_nconcat.
.SH HISTORY OF SHELLS
The Thompson shell, appeared in Version 1 AT&T Unix. It was superseeded in Version 7
AT&T Unix by the Bourne Shell.
.SH AUTHORS
This version of shell was written by Sintayehu Gereme in May,24,2023.
